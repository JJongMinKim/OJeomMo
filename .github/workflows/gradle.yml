# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: OJeomMo CI/CD

on:
  push:
    branches: [ "main" ]      # 메인브랜치에 푸시할때 작동
#   pull_request:             # 메인에 PR을 보낼때는 작동 X
#     branches: [ "main" ]

# flow에서 사용할 변수
env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: ojeommo-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: ojeommo-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ojeommo-codedeploy-deployment-group
  ENVIRONMENT_VALUE_ROUTE: ../../src/main/resources/application.yml

permissions:
  contents: read

# step의 집합
# 작성 순서대로 실행됨
# AWS에서 수동으로 배포할때 작성하는 shell script랑 동일
jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest    # 우분투 가장 최근 버전으로 설정

    # 작성 순서대로 실행된다.
    steps:

    # 1) 기본 체크아웃
    # 깃허브 레포의 코드를 CI서버(여기서는 EC2)로 내려받고 브랜치 전환
    # 매번 CI서버와 코드 저장소간 인증이 필요한 까다로운 절차를 편하게 해주는 라이브러리
    - name: CheckOut
      uses: actions/checkout@v3

    # 2) JDK 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 환경 변수 설정
    - name: Set Environment Value
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.ENVIRONMENT_VALUE_ROUTE }} 
      env:
        DB_IP: ${{ secrets.DB_IP }} 
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
        DB_PORT: ${{ secrets.DB_PORT }} 
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DDL_MODE: ${{ secrets.DDL_MODE }}
        JWT_KEY: ${{ secrets.JWT_KEY }}

    # 3) gradlew 권한 설정
    # build시 gradlew에 실행 권한 부여
    # 스크립트는 순서대로 실행되므로 권한을 먼저 부여하고 gradle을 build 해야함
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
      # working-directory: ${{ env.working-directory }}

    # 4) gradle 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test
      # working-directory: ${{ env.working-directory }}

    # 5) AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 6) AWS S3에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .


    # 7) AWS EC2에 Deploy
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
          

    
    
        
    ###############################################################################
    
    # - name: Setup SSH
    #   uses: webfactory/ssh-agent@v0.5.4
    #   with:
    #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    # - name: SCP transfer # ec2에 파일을 옮기는 작업
    #   run: scp ./build/libs/*.jar ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/cicd # jar파일을 cicd폴더로 보냄
    # - name: Execute remote commands
    #   run: |
    #       ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "sudo fuser -k 8080/tcp" # 기존 8080 죽이기
    #       ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "sudo nohup java -jar ~/cicd/*.jar &" # 서버 띄우기
